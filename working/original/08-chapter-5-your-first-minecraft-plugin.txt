<html><body>
# Chapter 5: Your first Minecraft plugin
## Introduction
So let's dive in and create our first Minecraft plugin. A plugin is a small program which is loaded and executed by a larger program. The larger program we'll be using is, of course, Minecraft Server. This first plugin will be short&mdash;just a couple of lines of code&mdash;so you won't have to type too much but you should read through this first chapter and try to understand the code and the notes. We'll build on the knowledge learned here when creating more sophisticated plugins in later chapters.

## Hello World
Launch your Editor and open the helloWorld.js file you created in chapter 4. Once opened, you can remove the comment entered previously and type the following text:

    console.log('Hello World');

We haven't used the *console.log()* function before. It's a built-in function which will print out a message in the server console window. You can also use the *console.log()* function in interactive mode at the server console window. Issue `js console.log( 8 + 3 )` and you'll see it prints the result:

    [scriptcraft] 11

Whenever you use the *console.log()* function, the output will start with `[scriptcraft]` because *console.log()* writes to the server's log file which is used by the core server and all plugins. The server software inserts the plugin name at the front of the message to make it easy for server administrators to tell which plugin is responsible for messages in the log file. We'll use console.log() in upcoming examples. This function is also super useful for debugging code: adding logging statements in your code so you know it's being executed. 

You may be wondering what the ';' (semicolon) is doing at the end of the line. The semicolon is used to end each statement in JavaScript. If you think of a statement as a sentence, then the semicolon ';' is to statements what the full stop '.' is to sentences. In JavaScript the semicolon isn't strictly needed but you should use it anyway. 

Another thing you might notice is there is no `js ` command in the helloWorld.js file. The `js ` prefix (text which is placed in front of other text) is only needed when executing JavaScript at the server console or in-game prompt. It should never be used inside JavaScript files.

After you've changed the helloWorld.js file, make sure to save it (choose Save from the File menu).

If your server isn't already started, then start it by running the script you created earlier. If the server is already started then restart your server by issuing the `reload` command in the server console window. After starting or restarting your server you should see the text 'Hello World' appear in your server console window. In fact you will see it every time the server starts. 

## Achievement Unlocked!
![](images/achievement-plugin-dev-4.png)

Believe it or not, you've just written your first Minecraft Plugin!

Well that was easy wasn't it? This might be a trivially simple plugin but it demonstrates essentially what a plugin is&mdash;some code which is 'embedded' in a larger program and is loaded every time the host program loads. The plugin code never runs on its own&mdash;it can only be run as part of some bigger 'host' program (Minecraft Server). You've just added new code to Minecraft Server! 

## Making your function reusable

So far the plugin we've written works fine; it is loaded and executed when the Minecraft Server starts. Sometimes that's all you might want or need but what if you want to be able to execute the code later on? Let's start by putting the code inside a function.
   
<caption>Listing 5.1: helloWorld() Function Declaration</caption>

    function helloWorld( ) { 
      console.log('Hello World');
    };
   
Now restart the server. 
   
What just happened? *The message no longer displays at startup!* That's because we've put the code inside a function *but we haven't called the function yet*! Declaring a new function and invoking the function are two different things. Just because you declare a function, it does not mean the function is automatically invoked when the file is loaded. Let's change the code once more, this time adding a call to the function we just created.

<caption>Listing 5.2: helloWorld() Function Declaration and Execution</caption>

    function helloWorld( ) { 
      console.log('Hello World');
    };
    helloWorld();

Now restart the server again. Once again, the message will appear every time the server starts up. The *helloWorld()* function you wrote will be loaded and executed by the Minecraft Server every time it starts.
   
OK. So we've wrapped the original code inside a function of our own and we call that function. So far so good. Sometimes you'll want to write functions to use at the in-game or server console prompt. Try running the *helloWorld()* function at the in-game or server console prompt.
   
    js helloWorld()
    
This command fails with an error `ReferenceError: helloWorld is not defined`. That's odd&mdash;no? The function obviously exists and works because it successfully executed when the server started up. How can it now claim the function isn't there? That's because functions which are loaded from the plugins/scriptcraft/plugins directory aren't automatically made available for use by others. The helloWorld.js file loads and all code in the file is evaluated and executed at startup. However, once it's loaded and executed, the code is basically invisible to others and can't be run again. You can make your code visible to others using a special variable called 'exports'. The 'exports' variable (as its name implies) "exports" code for use by others. It's how we provide code for use outside of the plugin itself. Let's revisit the helloWorld.js file one more time...

<caption>Listing 5.3: Making helloWorld() public</caption>

    function helloWorld( ) { 
      console.log('Hello World');
    };
    helloWorld();
    exports.helloWorld = helloWorld;

Restart the server again. Now the message appears in the server console. Let's look at the last statement in the code:

    exports.helloWorld = helloWorld;
    
What we are doing here is *exporting* the helloWorld function for use outside of the plugin. 

The *exports* variable isn't part of the JavaScript core language. It's provided by ScriptCraft which uses a module system called *CommonJS*. CommonJS is a set of rules which say how modules (and other things not provided by JavaScript itself) should work. The CommonJS rules for modules are easy to understand and adopt, so have become very popular lately, especially with the rising popularity of Node.js which is a JavaScript environment used by professional programmers.

## Private and Public Variables
When you create a new variable in a JavaScript file, it is 'private'. That means that no other parts of the system can see it. Only code within the file itself can see variables declared in a file. That's why, earlier, we couldn't execute the *helloWorld()* function even though it was defined and used within the file itself. Having variables be private by default is a good thing. If every variable you created was visible everywhere in the system it would lead to confusion. Imagine you created a file called 'MySuperDooperPlugin.js' and another called 'MyExplodingZombiesPlugin.js' and in both these files you have a variable called 'livesRemaining' . If the livesRemaining variable wasn't private then both MySuperDooperPlugin and MyExplodingZombiesPlugin would end up using the same variable which may not be what was intended at all. 

Making variables private by default means that 2 or more plugins don't have to worry about stepping on each others toes when updating or reading variables. In short, private variables are good. 

There are times when you want to make a variable public so it can be used by other parts of the system. To do this, you attach the variable to the special `exports` variable as we did earlier. As a general rule you should not make all of your variables public unless you really think they'll be needed elsewhere. We'll talk more about public and private variables later.

## A short note about Objects
The exports variable is a special type of variable&mdash;it is an 'object'. An object in JavaScript is something that can hold or contain other variables and functions. So we can create a new variable that belongs to the exports object much like we'd normally create a new variable ...

    exports.favoriteGame = 'Minecraft';

... The difference is, because we're attaching a new variable `favoriteGame` to an existing object `exports` we don't need to use the `var` keyword. Variables which belong to objects are also called *properties*. For example, every player in Minecraft is essentially (from the game's point of view) an object with certain properties. Each player has a health-level, experience points, the ability to fly (or not) and so on. In fact everything in Minecraft is an Object: Players, Blocks, Tools, Animals, Biomes, Worlds, Recipes and even the Server itself. Everything is an object because Minecraft is written in Java and Java is an Object-Oriented programming language. All of these objects in turn have properties. Each world has a *time* property which dictates what time it is in the game. Primed TNT blocks have a *yield* property which says how wide the TNT explosion would be. 

Players have dozens of properties. For example to give yourself the ability to fly, issue the following command at the in-game prompt: 

    js self.allowFlight = true

To give yourself super-human speed issue this command: 
    
    js self.walkSpeed = 1 

To reset your walking speed to normal, issue the command `js self.walkSpeed = 0`. The *self* variable is one of the built-in variables provided by ScriptCraft. When used at the command-prompt it refers to the player or console sender who issues the */js* command. The *self* variable should not be used anywhere except at the in-game or server console prompt. Everything in Minecraft is an object and every object has properties. Knowing how to use these objects and properties is the key to creating cool plugins for Minecraft. I'll talk more about objects in later chapters where we'll learn how to explore the Bukkit API documentation. 

### Term: Property
A *property* is an attribute of an Object&mdash;for example in real life we all have properties: eye-color, date-of-birth, name and so on. Objects in JavaScript also have properties and so too do in-game objects, The server object has *motd* (message of the day) and *port* properties. Each player has food level, experience and name properties. You can think of properties as variables that belong to or are attached to other variables.

## Summary
In this chapter you've written your very first plugin and have used the special `exports` variable to export your code so it can be reused elsewhere at the in-game or server console prompt.

</body></html>
