<html><body>
# Chapter 7: Multi-sided dice
## Introduction
In this chapter we'll build on the code written in the previous chapter to let us roll a dice of any number of sides. Sometimes we want a random number that doesn't fit in the range 1 to 6. Ideally we'd like our virtual dice module to return a random number for any range we give it. We're going to take our 6-sided dice from the earlier chapter and enhance it so it can change shape to any number of sides like the multi-sided dice used in some table-top and role-playing games.

[AUTHOR NOTE: images/chapter-07/mydice.jpg]

![](images/chapter-07/mydice.jpg)

<caption>Figure 7.1: Multi-Sided Dice</caption>


## Flexible Functions
If we wanted to expand on what we've already done to support dices of 4, 6 and 8 sides we might write new functions for each type of dice...

    function rollSixSided(){ 
      ...
    }
    function rollFourSided(){
      ...
    }
    function rollEightSided(){
      ...
    }
    exports.rollSixSided = rollSixSided;
    exports.rollFourSided = rollFourSided;
    exports.rollEightSided = rollEightSided;
    ...
    
... and so on. That would be time-consuming, repetitive and laborious, and the whole point of programming is to **make the computer do the work!** The problem with this approach&mdash;apart from being time-consuming to type&mdash;is that every time we want to support a new type of dice&mdash;say 10, 12 and 20 sided dice&mdash;we have to write a new function. If we then wanted to simulate the roll of a 24 sided dice, we'd have to write *yet another* function. Fortunately there's a better way. 

What if, when we call the *roll()* function, we could tell the function how many sides the dice has and the *roll()* function behaved accordingly? If we could say 'Hey throw a 6-sided dice' or 'Hey throw a 20-sided dice' and *roll* would do the right thing (return a random number between 0 and 5 for the first call and return a random number between 0 and 19 for the second call). This is where *Parameters* come in. 

## Term: Parameter
*Parameters* provide a way to give some instructions to functions. We can pass values to a function and the function will treat them like variables. There's another word often used in programming which can mean the same thing: Arguments. We say that we pass arguments to functions and the function receives them as parameters. The distinction isn't very important. You can use the words *arguments* or *parameters* when talking about passing values to functions.

We've already been using parameters in earlier code examples. In an earlier chapter we used the *console.log* function and passed it a parameter. Try issuing the following statements at the server console window:

    js console.log('Hello world');

You should see the message 'Hello world' appear in your server window. 'Hello world' is the instruction (or *parameter* to use the formal term) you gave to the *console.log* function when you ran it. Try again with the following command:

    js console.log( 5 + 9 );
    
You should see '14' appear in your server window. The expression `5 + 9` is the parameter you gave to the *console.log()* function which just printed the resulting value. An important point: the *console.log()* function did not do the math, that was done just before the function was called so the parameter which *console.log()* received was 14. The *console.log()* function is commonly used for *logging*. Logging is the practice of printing output to screen; usually for the purpose of debugging or better understanding your code's behavior.

Just as *console.log* and many other functions can take parameters, we can write our own functions so that they take parameters when they are called. Let's take a look at a slightly modified version of the code from the previous chapter. You don't have to type this code, I just want to highlight some changes:

<caption>Listing 7.1: Rolling Dice&mdash;sides as a variable.</caption>

    function roll( ) {
      var result = Math.random();
      var sides = 6;
      result = result * sides;
      result = Math.floor(result);
      return result;
    };
    exports.roll = roll;

The above code is similar to code from the previous chapter except I declare a new variable called *sides* and the number 6 is assigned to it. On the following line the math used is `result = result * sides` instead of `result = result * 6` as in the previous chapter. So all we've done is create a new variable called *sides* to store the number of sides. This function behaves the same as the function from the previous chapter. But what if we could somehow change the value of the *sides* variable before each call to *roll()* ? Let's change the code once more:

<caption>Listing 7.2: Rolling Dice&mdash;sides as a parameter.</caption>

    function roll( sides ) {
      var result = Math.random();
      result = result * sides;
      result = Math.floor(result);
      return result;
    };
    exports.roll = roll;

Can you spot the difference? I removed the `var sides = 6;` statement and put a new name `sides` between the function's curly brackets. The `sides` variable is no longer a private variable and is instead a parameter. Because it's a parameter, we can say what it should be each time we call the *roll()* function. The following diagram illustrates the changes the function has just undergone.

[AUTHOR NOTE: images/chapter-07/magicnumber-to-parameter.png]

![](images/chapter-07/magicnumber-to-parameter.png)

<caption>Figure 7.2: Using Parameters</caption>


The first change was to make the number 6 used in the computation a variable. The next change was to make the variable a parameter. Parameters are like variables. In the first version of this program (on the left hand side) the number 6 is 'hard-coded'. 'Hard-coding' is when you have a specific number or text or other data in your function which at the time seemed like it might never need to change (this would be true if we assumed we'd only ever need a number between 0 and 5). It's usually a good idea to instead turn these values into parameters so you don't have to change your code every time the data changes. Once you've edited your dice.js file to match the version on the right, save it and then type `/js refresh()` at the in-game prompt and try each of the following commands in turn:

    /js var dice = require('dice');

    /js dice.roll(6);
    /js dice.roll(20);

Try calling `dice.roll(20)` a couple of times to confirm that it does in fact choose random numbers between 0 and 19. 

Our updated roll() function now takes a parameter which says how many sides the dice should have. The type of parameter this function takes is of type 'Number'. Functions can take parameters of any type, Numbers, Strings (text), Booleans (true or false), even other functions! We'll see an example in the next chapter of a function which takes another function as a parameter. Remember&mdash;functions are just values like anything else in JavaScript so they too can be assigned to variables (as we've already seen) or passed as parameters (as we'll soon see). 

## Default parameter values
What happens if you call dice.roll() *without* passing a parameter? You can see for yourself by issuing this command at the in-game prompt:

    /js dice.roll()

You should see `NaN` as the result. *NaN* is short for *Not a Number* in JavaScript and it means the computed value was not a number. Do you know why? Our function always expects a number (how many sides the dice has) and if we don't give it one, the math won't work as expected. Wouldn't it be nice if, when no number is passed to `dice.roll()`, it just assumes that we want the roll of a six-sided dice? Six-sided dice are, after all, the most common type of dice. Let's make another minor change to the *roll* function:

<caption>Listing 7.3: Rolling Dice. Default Parameters</caption>

    function roll( sides ) {
      if ( typeof sides === 'undefined' ) { 
        sides = 6;
      }
      var result = Math.random();
      result = result * sides;
      result = Math.floor(result);
      return result;
    };
    exports.roll = roll;

What I've done here is add 3 new lines of code near the top of the *roll* function. The rest of the function remains unchanged.

    if ( typeof sides === 'undefined' ) {
      sides = 6;
    }

The *if* statement is how decisions are made in JavaScript. It's used to test something (a condition) and if the test is true then the code inside the `{` and `}` curly braces (called the 'if block') is executed. In English, we'd write the above code like this.

    if there is no 'sides' parameter then
       let sides be equal to 6
       
We'll look at the `if` statement in more detail in later chapters. All you need to know for now is that it can be useful for controlling how our programs behave under different conditions. The code inside the round brackets `typeof sides === 'undefined'` returns the type of the sides parameter. If no parameter was supplied then it will be of type *undefined* in which case we set the sides parameter to a default value of 6. Once you've edited and saved your dice.js file, make sure to issue the `/js refresh()` command at the in-game prompt and then issue the following statements:

    /js var dice = require('dice');
    /js dice.roll(20);
    /js dice.roll();
    /js dice.roll(4);
    /js dice.roll();

You should see a random number output for each of the above calls. The *roll* function is now robust enough to handle parameters and use a sensible default value of 6 if no parameters are given when it's called.

## Assigning to the exports variable
Let's say we want to create a new module that provides farm animals. We could write it like this:

    var cow = 'Cow';
    var sheep = 'Sheep';
    var pig = 'Pig';
    exports.cow = cow;
    exports.sheep = sheep;
    exports.pig = pig;
    
But since the first 3 parameters aren't really used except to assign to exports, we could simply write:

    exports.cow = 'Cow';
    exports.sheep = 'Sheep';
    exports.pig = 'Pig';
    
...saving ourselves some typing. There may be times when this isn't suitable. If the *cow* variable is used inside the module then it makes sense to declare it and assign to the exports variable. If not then it's simpler to just assign the value directly to the exports variable rather than creating an extra variable which won't be used for any other purpose.
    
## More on comments
Before we move on to the next chapter, I want to talk more about Comments. In the very first JavaScript file we created, we started with a single line:

    // TO DO : Add some code later

This is called a comment. Comments are notes we write in our code to help us remember things. Source code can be difficult to understand even when you yourself have written it. In the heat of tackling a tricky problem or coding up a cool new plugin you might end up writing some very clever code but you'll often find that after you come back to it a couple of days or weeks later, you no longer understand what you've written. This is where comments come in. It's a good habit to write comments alongside your code, especially if your code is tricky. 

Comments aren't read by the computer so you can write whatever you like in a comment. Comments should be helpful and provide sign-posts to yourself and others about what the code does. You can comment as much or as little as you like. When working with others on the same source code it's considered good practice to comment your code. How much you comment your code, is a matter of personal taste. Commenting can be really useful for *documenting* your code. For example, the ScriptCraft API reference documentation available at http://scriptcraftjs.org/api is created automatically from comments in the scriptcraft source code. 

### Single-line comments
You can make any line into a comment by starting it with two `/` (forward-slash) characters:

    // this is a JavaScript comment
    console.log('this is not a comment');
    
If you were to run the above code you'd get the following output:

    this is not a comment
    
The first line is ignored and is only readable by programmers.

### End-of-line comments
You can also add comments to the end of lines like this:

    console.log('The rain in Spain'); // falls mainly in the plain
    
If you run the above code you see:

    The rain in Spain
    
Everything before the `//` is regular code, everything after the `//` is a comment.

### Multi-line comments
Sometimes you will want to write a lot of comments in your code. You might have a section of code which requires some explaining. You can do so using multiple `//` comments like this:

    // ---------------------------
    // Drone Plugin
    // The Drone is a convenience class for building. It can be used for...
    // 1. Building
    // 2. Copying and Pasting

or if your comments span more than one line (like above) you can use opening and closing comments which must begin with `/*` and end with `*/` like this:

    /* ---------------------------
       Drone Plugin
       The Drone is a convenience class for building. It can be used for...
       1. Building
       2. Copying and Pasting
    */

Most programming editors will display comments in a different color so that they stand out from the rest of the code. Comments can be really helpful in reading and understanding source code.

### Commenting out code
You can also use comments to *turn off* the execution of code. This can be useful if you want to temporarily change your code or if you have sections of code which you no longer need but do not want to remove just yet.
 
     console.log('Pig says: Oink');
     // console.log('Cow says: Moo');
     console.log('Sheep says: Baa');
     
The output from the above code would be:

    Pig says: Oink
    Sheep says: Baa

The second statement is ignored because it has a `//` in front of it. Remember, everything after `//` on a line is treated as a comment.
  
### Comments in this book
Most of the source listings in this book will not include comments because the code is explained throughout. If you look at the ScriptCraft source code you will see that the code is commented.
    
### Commenting dice.js
Open dice.js in your editor and add a comment section at the top of the file. The comment section should briefly describe what the module does. You can use either `//` comments or `/* */` style comments. The comment text can be as short or as long as you like. Here is an example:

<caption>Listing 7.4: Commenting Code</caption>

    /*
     this module provides a roll() function which returns a random number.
     the range of numbers is set using the sides parameter.
     if no sides parameter is provided, the default is 6.
     Usage: 
       var dice = require('dice');
       var randomNumber1 = dice.roll();
       var randomNumber2 = dice.roll();
    */
    exports.roll = function( sides ) {
      if ( typeof sides === 'undefined' ) { 
        sides = 6;
      }
      var result = Math.random();
      result = result * sides;
      result = Math.floor(result);
      return result;
    };

Make sure to save the file after you've changed it, run `/js refresh()` at the in-game prompt then run the following commands to ensure your code still works:

    /js var dice = require('dice');
    /js dice.roll();
    /js dice.roll(20);
    
![](images/achievement-plugin-dev-6.png)

Congratulations. You've taken another step towards becoming a responsible plugin developer. Your code is robust and well commented. Commenting code is really important if you want to share your work with others.

## Summary
You've seen that functions can both return *and take* a value as a parameter. Parameters can be really useful when we want to provide information to a function. It's usually a good idea to have default values if your function is called without parameters. We've also learned about comments and how they can be used to add useful notes for ourselves and others to help understand our code.
    
</body></html>
