<html><body>
# Chapter 8: Greeting Players
## Introduction
In this chapter we'll change the Minecraft game for all players. The best plugins enhance the Minecraft experience and at the same time feel like they are an intrinsic part of the game. In this plugin each player will be greeted with a new random message each time they join the server. This will be the first plugin that uses *event driven programming* which is a way to listen and react to happenings or events in the game. Along the way, we'll learn about Arrays, a special type in JavaScript for storing lists of items.

## Event Driven Programming
Back in the early days of programming there was no such thing as Event Driven Programming. Programs were started and ran to completion, then exited. If your program needed to ask the user a question, it did so using a command prompt and did not resume until the user had typed a response and hit enter. With the advent of Graphical User Interfaces in the 80s and 90s, programs and user-interaction became more sophisticated. Programs had to be written differently to accommodate new ways users could interact with programs using Menus, Buttons, Windows and so on. When you click a link or a button on a web page or other application, that click is an *event*. In Minecraft, when you fire an arrow, break a block, open a door, join the server or do pretty much anything, that's an *event*. Event driven programming lets programmers write functions which listen and react to such events.

In the first part of this chapter we're going to write a module with a single function which will return a random greeting each time it's called. This new module will depend on the module we created in chapter 7 to return a random number for us. Create a new file in the *scriptcraft/modules* folder and call it *greeting.js* then type in the following code and save your file:

<caption>Listing 8.1: Random Greetings</caption>

    var dice = require('dice');
    var greetings = [ 'Hello ', 'Hola ', 'Bonjour ', 'Konnichiwa ' ];
    var len = greetings.length;
    function random(){
      var index = dice.roll(len);
      var greeting = greetings[ index ];
      return greeting;
    }
    exports.random = random;

We're already getting the benefit of modules and reuse in that we can reuse the *dice* module we created earlier. This is the first statement in our new module. If your module depends on other modules, it's usually a good idea to load those modules at the top of your code. It's another of those good habits you should adopt as a JavaScript programmer because in the long run it will make programming easier. 

The next statement declares a new variable called *greetings* and assigns a list of greetings in different languages to it. We haven't seen arrays before so they need some explanation. 

## Arrays
So far we've used variables to store single items in memory. Those items have been numbers and strings (text). It's useful to be able to store lists of items in memory too. For example, in Minecraft, the server stores a list of players who are currently playing, a list of worlds on the server and many other lists. Lists are useful in that they let us keep track of groups of things. In JavaScript, lists are called *Arrays*. An *Array* is a collection of items. For example, if you wanted to create a list (or Array) of farm animals in Minecraft, you'd do so like this:

    var farmAnimals = [ 'Sheep', 'Cow', 'Pig', 'Chicken' ];

An array starts and ends with square brackets `[ ]`, and each item in the list is separated with a comma `,`. The last item in the list should not have a comma after it. Let's do some server console experimentation with arrays. Issue the following commands at the server console prompt:

    js var farmAnimals = [ 'Sheep', 'Cow', 'Pig', 'Chicken' ];
    js console.log(farmAnimals);
    
The output should be:

    Sheep,Cow,Pig,Chicken
    
Arrays have a special property which tells us how many items are in the array. Issue the following command at the server console:

    js farmAnimals.length
    
The output should be:

    4
    
The `length` property tells us how many items are in the array and is very useful as we'll see later. Okay, now for the tricky part. We use the `[]` characters when constructing a new array but it's also possible to get a particular item from the array using those same `[]` characters if we put a number between them. Let's try it out. If we wanted to get the 1st item from the array (Sheep) a non-programmer would naturally write something like this:

    js farmAnimals[1]
    
Go ahead and issue that command now before reading any further. 

Were you surprised by the result? If you're new to programming you should be. The result is `Cow` and not `Sheep`. That's because in JavaScript (and many other programming languages too), indexes start at 0 not 1 so if I want to get the *first* item in the farmAnimals array I say `farmAnimals[0]`. If I want to get the second item I say `farmAnimals[1]` , for the third item I say `farmAnimals[2]` and so on. This can be a constant source of confusion for even experienced programmers. The reason why arrays start at 0 and not 1, harks back to the old days of computing when computer memory was not as abundant and cheap as it is today. Having arrays start at 0 rather than 1 was slightly more efficient. 

Here's another question: How might I get the *last* item in an array? If we know the length of the array we could try this:

    js farmAnimals[ farmAnimals.length ]

But that won't work. Remember, arrays begin at 0 not 1 so if we have 4 items in the array then the *index* of the last item will be 3 so we need to write:

    js farmAnimals[ farmAnimals.length - 1 ]

I told you arrays were tricky! Just remember: *Arrays begin at 0 not 1*. This is what the list of farm animals might look like with the indexes listed beside each animal:

    [0] 'Sheep'
    [1] 'Cow'
    [2] 'Pig'
    [3] 'Chicken'

Okay. Having explained the basics of how arrays work, the *greetings.js* listing should be a little easier to understand now. The *random* function rolls a dice (whose sides are the length of the array : 4) and then assigns the random number returned to a variable called *index*. We then use that index to get an item from the *greetings* array. We are effectively plucking a random item from the list of greetings. Try it out for yourself by issuing the following commands at the in-game prompt.

    /js refresh(); // reloads plugins
    /js var greetings = require('greetings');
    /js greetings.random();
    /js greetings.random();
    /js greetings.random();

You should definitely call `greetings.random()` a couple of times to verify it returns a random greeting each time. Remember, you can call up the previous command at the in-game prompt by pressing `/` then pressing the UP arrow key. 

So far we've only looked at constructing arrays and getting individual items from arrays. Arrays are very powerful and there are many things you can do with them. 

Once you've constructed an array you can add new items to the end of the array using a function called *push*. The *push()* function is used like this to add a new item:

    /js farmAnimals.push('Horse');

'Horse' is added to the end of the array. After the above command is executed, the *farmAnimals* array would look like this:

    [0] 'Sheep'
    [1] 'Cow'
    [2] 'Pig'
    [3] 'Chicken'
    [4] 'Horse'   <-- New item appended

The length of the array would change from 4 to 5. You can check this by issuing the command `/js farmAnimals.length`. The *push()* function cannot be called on its own. It's a special type of function called a *method* which means it's a function that belongs to a particular object so it can only be called using the form *object.method()*, 'object' in this case being 'farmAnimals' and 'method()' being 'push()'. We'll explore Objects more in later chapters.

The *push()* method always *appends* items to the end of the array. If you want to insert an item into the array at a position other than the end, you'll need to use the *splice()* method instead. Here's how you insert a new animal into the farmAnimals array at position 2:

    /js farmAnimals.splice( 2, 0, "Cat" );
    
This is what the array will look like after you run the above command:

    [0] 'Sheep'
    [1] 'Cow'
    [2] 'Cat'     <-- New item inserted
    [3] 'Pig'
    [4] 'Chicken'
    [5] 'Horse'

You can see that the new item is inserted at position 2 and that the indexes for all of the items after position 2 have changed. 'Pig' is bumped from index 2 to index 3, 'Chicken' from index 3 to index 4 and so on. The *splice()* method lets you insert items anywhere in an array. The first parameter is the position you want to insert the items, the second parameter is how many items you want to remove&mdash;if you're only inserting items then leave this as 0, and the third and subsequent parameters are the items you want to insert. You can insert one or more items at a time:

    /js farmAnimals.splice( 1, 0, "Ocelot", "Wolf" );
    
This is what the array would look like after running the above command: 

    [0] 'Sheep'
    [1] 'Ocelot'  <-- New items inserted
    [2] 'Wolf'    <-- New items inserted
    [3] 'Cow'
    [4] 'Cat'     
    [5] 'Pig'
    [6] 'Chicken'
    [7] 'Horse'

Now let's say we want to remove some items from an array. The list of farm animals we've constructed so far is starting to look crowded and there are definitely some animals in that list which shouldn't be there (Wolves and farm animals don't mix). As hinted at previously, the *splice()* method can also be used to *remove* items from the array. Let's start by removing the 'Cat' item from the array:

    /js farmAnimals.splice( 4, 1 );

The output from the above command will be an array of items removed so in your display you'll see something like this: 

    [ "Cat" ]

That's because the *splice()* method does not return the array it spliced, instead it returns the items it removed from the array. Remember, the first parameter you pass to *splice()* is the index of the item, and the second parameter is always the number of items you want to remove. If no additional parameters are provided, then splice will only remove items and not insert new items. To see what your farmAnimals array looks like now run the `/js farmAnimals` statement. Your array will look something like this in memory:

    [0] 'Sheep'
    [1] 'Ocelot'  
    [2] 'Wolf'    
    [3] 'Cow'
    [4] 'Pig'
    [5] 'Chicken'
    [6] 'Horse'

Now let's tidy up the array some more by removing the pesky Ocelot and Wolf :

    /js farmAnimals.splice( 1, 2 );
    
The above statement says 'starting at index 1, remove 2 items'. The array will now look like this:

    [0] 'Sheep'
    [3] 'Cow'
    [4] 'Pig'
    [5] 'Chicken'
    [6] 'Horse'

There are a couple of other useful Array methods:

<table>
<caption><h4> Table 1: Array Methods</h4></caption><tr><th>Method Name</th><th>Description</th></tr>
<tr><td>.push()</td><td>Adds one or more elements to the end of an array and returns the new length of the array.</td></tr>
<tr><td>.pop()</td><td>Removes and returns the first item in the array.</td></tr>
<tr><td>.unshift()</td><td>Adds one or more elements to the beginning of an array and returns the new length of the array.</td></tr>
<tr><td>.shift()</td><td>Removes the first element from an array and returns that element. This method changes the length of the array.</td></tr>
<tr><td>.reverse()</td><td>Reverses an array in place. The first array element becomes the last and the last becomes the first.</td></tr>
<tr><td>.splice()</td><td>Changes the content of an array, adding new elements while removing old elements.</td></tr>
<tr><td>.slice()</td><td>Returns a shallow copy of a portion of an array into a new array object.</td></tr>
<tr><td>.join()</td><td>Joins all elements of an array into a string</td></tr>
<tr><td>.indexOf()</td><td>Returns the first index at which a given element can be found in the array, or -1 if it is not present.</td></tr>
<tr><td>.sort()</td><td>Sorts the elements of an array in place and returns the array. The default sort order is Alphabetic.</td></tr>

</table>

You can learn more about the Array object and its methods and properties at https://developer.mozilla.org/en-US/docs/Web/Javascript/Reference/Global_Objects/Array. In later chapters we'll learn how to process all of the items in an array using JavaScript's looping statements.

## First steps with Events
So we have a new module *greetings.js* with a single function: *random()* which returns a random greeting. What we want is for every player who joins the game to be greeted with a random greeting. Let's dive right in and create a new module called *greetPlayers.js* . Important: This new *greetPlayers.js* module should be saved in the **scriptcraft/plugins** folder, *not* the scriptcraft/modules folder because we'll want this module to load automatically when the server starts up. Type the following code into your new greetPlayers.js file:

<caption>Listing 8.2: Greeting Players as they join the Server.</caption>

    var greeting = require('greetings');
    function greetPlayer( event ) {
      var player = event.player;
      var message = greeting.random() + player.name;
      player.sendMessage( message );
    };
    events.playerJoin( greetPlayer );

Make sure to save your file then run the JavaScript *refresh()* function to reload ScriptCraft using `/js refresh()` from the in-game prompt or `js refresh()` from the server prompt. Now disconnect from your server and rejoin the server. You should see something like this in your screen when you join the server:

    Konnichiwa walterh

The message will of course be different for you. Figure 8.1 shows where you should expect the greeting to appear when you join the server:

[AUTHOR NOTE: images/chapter-08/screenshot-greeting.png]

![](images/chapter-08/screenshot-greeting.png)

<caption>Figure 8.1: Greeting Players</caption>


ScriptCraft comes bundled with a built-in variable called *events*. The *events* variable is used to listen and react to events in the game. There are approximately 200 different types of events that you can register for in Minecraft. When you *register* for an *event* in your code you are telling the server that you want to be notified when a particular type of activity occurs in the game. You register by giving the server a function which won't be called immediately but will only be called when the activity occurs. In the code above we are basically saying to Minecraft "Hey, whenever someone joins the game, I want you (the server) to call this 'greetPlayer' function" . 

This is the first time we've seen functions used as parameters to another function call. We call the *events.playerJoin()* function passing it another function as a parameter. This style of coding&mdash;passing functions as parameters to other functions&mdash;is called *functional programming*. The important thing to note here is that at no point in this module is the *greetPlayer()* function actually called. All we do is register it using the *events.playerJoin()* function so that it will be called later each time a player joins. The *greetPlayer()* function is called an *event-handling* function because its purpose is to handle events, specifically the event which is fired by the server whenever a player joins the game. 

We'll look more closely at events and event-handling functions in a later chapter.

## More on Modules

From looking at the *greetPlayers* module you can see the first thing it does is load another module: *greetings* which we created earlier in this chapter. If you remember, the *greetings* module in turn loads yet another module&mdash;the *dice* module we worked on in the previous chapters. This is a classic example of how programming is typically done. We start with small dedicated modules and then work on bigger and bigger modules piecing them together to solve a problem. In programming, a big part of problem-solving is breaking problems down into smaller and smaller problems and solving each of these smaller problems then piecing together the solutions. Programming can often feel like playing with toy building bricks except *you* get to design the bricks and put them together. When a program module relies on another module we say it *depends* on the module. A module which loads another module *depends* on that module and that module in turn will *depend* on other modules. All of the modules which are required&mdash;either directly or indirectly&mdash;by a program are called *dependencies*. You can see in Figure 8.2 the relationship between the *greetPlayers*, *greetings* and *dice* modules. 

[AUTHOR NOTE: images/chapter-08/encapsulation.png]

![](images/chapter-08/encapsulation.png)

<caption>Figure 8.2: Encapsulation and Modules</caption>


The *greetPlayers* module depends on *greetings* but it does not know or care that *greetings*&mdash;in turn&mdash;depends on the *dice* module. This is an important principle in programming. The *greetings* module, by exporting just a single *random()* function, is defining what programmers call an *Interface*. The *Interface* is the contract or agreement a module has with other modules. It's a way of declaring what your module is to be used for&mdash;what its purpose is. When defining an Interface, a module should hide the details of *how* it works and just say *what* it does. Modular systems work because parts can be swapped out and changed without affecting the entire program. You can think of an individual module (a JavaScript file) as working like an individual Lego brick. Modules can be pieced together to form larger modules and programs, eventually creating something truly awesome.

Minecraft is often described as 'Virtual Lego', Programming is similar and offers the same rewards, It is enormously creative and can be great fun.

## Greeting Players in Style
To make players feel welcome, let's add something a little more spectacular than a simple text message. Let's greet each new player with a firework which launches when and where they join the server. 

<caption>Listing 8.3: Greeting Players with Fireworks</caption>

    var greeting = require('greetings');
    var fireworks = require('fireworks');
    function greetPlayer( event ) {
      var player = event.player;
      var message = greeting.random() + player.name;
      player.sendMessage( message );
      fireworks.firework(player.location);
    };
    events.playerJoin( greetPlayer );

We'll use the ScriptCraft *fireworks* module again in later chapters. Events and event-handling functions can be used to trigger all kinds of cool new game mechanics.

## Achievement Unlocked!
![](images/achievement-plugin-dev-7.png)

Major Kudos! You've created your first custom event handler and have had your first encounter with event-driven programming. Soon you'll be putting event-handling to use to protect your server and add your own fun effects.

## Summary
In this chapter you learned about how to create and manipulate lists of items using JavaScript Arrays. You also learned about Event programming and wrote your first event-handling function to greet players when they join your server. In the next chapter we'll explore events further and play with Sounds in Minecraft.

</body></html>
