<html><body>
# Chapter 16: Add new Crafting Recipes: The Ender Bow
## Introduction
All fun Minecraft Plugins begin with a simple question: What if ... ? Minecraft has become such a popular game because the possibilities are endless. For Minecraft Plugin Developers it's even more fun because the programming API allows for endless creativity in customizing the game. In this chapter we're going to use the Bukkit API to create a new Crafting Recipe&mdash;one which will produce a new in-game item&mdash;the *Ender Bow*. What's an Ender Bow? It's a bow which shoots arrows that teleport the player to where ever the arrow lands! This could be a handy tool to have if you're in a tight spot surrounded by monsters on all sides and need to make a quick getaway. With Ender Bow in hand, you just draw your bow, aim at where you want to teleport and shoot. As soon as the arrow hits, you'll be teleported. 

In this chapter we're going to add a new crafting recipe which will construct an *Ender Bow*, we'll explore the Bukkit API in more detail, and I'll explain how to go about exploring and discovering features of the API which you can use in your own plugins. We'll learn about Java *Classes* and *Inheritance* and how these ideas help us figure out the Bukkit API's capabilities. In the follow-up chapter we'll add teleporting behavior to the bow.

Before we get into the 'How' of adding the new Crafting Recipe to the game, let's first consider the 'What'&mdash;what ingredients will be required for the new recipe and how we go about choosing them.

## Crafting an Ender Bow
A regular bow in Minecraft is crafted using 3 bits of stick and 3 bits of string. By arranging each piece in a certain formation in the Crafting Grid, a Bow is crafted. The Ender Bow we'll add to the game is special though. It will require some extra ingredients to add teleporting magic to the bow. I call this new item the 'Ender Bow' after the 'EnderMan' monster type in Minecraft. An EnderMan can teleport from one location to another at random which is what makes him such a terrifying and unpredictable opponent. If you're lucky enough to defeat an EnderMan in battle, they drop *Ender Pearls* which can be thrown by hand to teleport a short distance. The range of the Ender Bow will obviously be longer than throwing by hand and&mdash;unlike throwing Ender Pearls&mdash;it won't deal any damage to the shooter when they are teleported. This is what the Crafting Grid for a regular Bow looks like in Minecraft:

[AUTHOR NOTE: images/chapter-16/bow-recipe.png]

![](images/chapter-16/bow-recipe.png)

<caption>Figure 16.1: Crafting Recipe for a Bow</caption>


In the next section we'll look at how we can use this information to craft a new type of Bow.

### Choosing what materials should be used
It's a good idea to base a new Crafting Recipe on an existing Recipe. Server plugins cannot add new Graphics to the Minecraft Client. For example we couldn't add a completely new Item like a Portal Gun because even if you were a Graphics Whizz, the Bukkit API provides no way to add new item graphics to the client. Another reason to base new Crafting Recipes on existing items is that players are already familiar with many of the crafting recipes and if you add a new recipe which is just a little twist on an existing recipe, it makes the recipe and the resulting item easier to remember and master.

For the Ender Bow recipe, we're going to base our new recipe on the existing Bow recipe but add some ingredients to give the Bow its special powers. You'll notice that for a standard Bow recipe, there are 3 empty slots in the grid. We're going to use these slots adding a new ingredient to each of the 3 empty slots to craft an Ender Bow.

The ingredient we're going to add is *Ender Pearl*. These are obtained from teleporting Endermen so it makes sense they should be ingredients for an Ender Bow. You could of course choose whatever material you like. You could for example decide that an extra block of grass in the middle is all that's needed to create an Ender Bow. For players that might not make the new Item very interesting. Any new item you add to the game should be interesting both in what it does *and* how it's constructed. New items should not be *too* easy to make&mdash;especially if they're powerful like the Ender Bow. Ender Pearls are difficult to obtain in survival mode so they make for good ingredients for the Ender Bow. So our Ender Bow will be constructed using the following recipe:

[AUTHOR NOTE: images/chapter-16/ender-bow-recipe-not-yet.png]

![](images/chapter-16/ender-bow-recipe-not-yet.png)

<caption>Figure 16.2: Crafting Recipe for a Bow</caption>


You'll notice in Figure 16.2 that no item appears in the right hand side. That's because we haven't yet instructed the server to recognize that recipe. Now that we've figured out what we want our new Crafting Recipe to look like from a Player's point of view, let's dive in to how we'll program this new behavior into the game.

## Exploring the Bukkit API.
So we've answered the question of *What* we want to do, now we must ask *How* are we going to do it? This is a list of what we want to do:

1. Add a new Crafting Recipe to the game 
2. Add new Teleporting behavior for arrows fired from an Ender Bow.

We'll tackle the 2nd item in the next chapter so let's look at how we add a new crafting recipe to the game. 

Bukkit has been around for a few years and has a large community of developers who have been using the API and posting questions and answers on the Bukkit forums. If there's something you want to do in Bukkit, a good place to start is by searching online. A quick search online for 'bukkit add recipe' at the time of writing yields as the first result a link to the Bukkit forums where one poster asks a question about adding custom recipes:

https://forums.bukkit.org/threads/am-having-trouble-adding-custom-recipes.102722/

Very often such results can be very useful when starting down the path of creating your own plugin.

What's even more useful is the comprehensive API reference available at http://jd.bukkit.org/rb/apidocs/. This API reference is a set of interlinked web pages which are generated automatically from comments in the Bukkit source code. The reference lists all of the *Classes*, *Packages* and *Methods* in the Bukkit API. A Java *Class* is much like a JavaScript Module while a Java *Method* is much like a JavaScript Method or Function. A Java *Package* is a folder of Java *Classes*, it's just another way of organizing large numbers of source files. Java programs can be quite large, much larger than their JavaScript equivalents so the source files must be organized in folders and sub folders. Each folder and sub-folder is known as a *Package* in Java terms. 

For example, in Minecraft there are hundreds of different types of *events* which can occur in the game. It would be difficult for the Bukkit development team and for Plugin developers if all of the event source code was in a single folder called *events* so it makes sense to create sub-folders for categories of events.

If you visit http://jd.bukkit.org/rb/apidocs You'll see a web page with 3 distinct areas.

[AUTHOR NOTE: images/chapter-16/apidocs.png]

![](images/chapter-16/apidocs.png)

<caption>Figure 16.3: Bukkit API Docs</caption>


The area on the top left is the list of packages. This area provides a high-level overview of the entire API. You can quickly move from one package to another by clicking any of the packages listed in this area.

The area on the bottom left is the list of classes in the current package (the package selected in the top left pane). Clicking on any of the items in this area will display more details about the chosen item in the main display pane on the right.

[AUTHOR NOTE: images/chapter-16/apidocs-bukkit-class.png]

![](images/chapter-16/apidocs-bukkit-class.png)

<caption>Figure 16.4: Bukkit API Doc Layout</caption>


Clicking on any of the method links in the right hand side of the page will take you to more information about the method. 

You can call any of the Java classes and methods from within JavaScript&mdash;in fact&mdash;that's what we've been doing throughout this book. 

One of the key differences between Java and JavaScript is that Java is 'strictly-typed'. That means it has no `var` keyword. Instead when variables are declared, their type must also be declared. So while in JavaScript you could write:

    var myString = "Hello World";
	
... in Java you would have to write:

    String myString = "Hello World";

You'll notice when browsing the Bukkit API that many methods include both the types of parameters they expect and the type of data they return. For example, the *Bukkit* Class found in the *org.bukkit* package has an *addRecipe()* method whose method summary looks like this:

    static boolean addRecipe(Recipe recipe)

Let's look at this piece by piece. The *static* keyword means the method is really a function. It can be called without first creating a *Bukkit* object. The *boolean* to the left of the method name is the type of data the method returns. The *Recipe recipe* inside the round brackets says that the method takes one parameter named *recipe* of type *Recipe*. This is the conventional way that Java methods are defined: the parameter type is shown along with the parameter name. 

Every Type name in the Java documentation page is a link to more information about the Type. So if I want to find out more information about the *Recipe* Java type, I just click on that link. 

### Interfaces, Classes, Enums, Exceptions and Annotations
Java has a couple of different Object types but you don't have to worry too much about the differences. Still, it's useful to know what the different terms mean.

#### Interfaces
A Java interface is an *Abstract* type. That is&mdash;it says what the object *should* do but now *how* it should be done. Interfaces are used quite a lot in Java and throughout the Bukkit API. For example, the *Recipe* type is an *Interface*. It has a single empty method called *getResult()* which should return the Item crafted by the recipe. The *Recipe* type has sub-types called *FurnaceRecipe*, *ShapedRecipe* and *ShapelessRecipe* each of which provide their own *getResult()* method implementations. 

In Java, if a method takes an Interface type as a parameter, it will also take any sub-types too. That's one of the nice features of Java and Object-Oriented programming. 

#### Classes
Classes are like Interfaces except they are *concrete* types; they have methods which are not empty. A Java class is much like a module in JavaScript, it is a way to package up a collection of related functions and variables into a single logical unit. 

#### Enums
Enums are like Classes except they are usually just a collection of named properties. For example, the *org.bukkit.GameMode* enum has 3 possible values which correspond to the supported game modes in Minecraft:

* org.bukkit.GameMode.ADVENTURE
* org.bukkit.GameMode.CREATIVE
* org.bukkit.GameMode.SURVIVAL

Another example of an Enum is the *org.bukkit.Difficulty* enum which has the following values:

* org.bukkit.Difficult.EASY
* org.bukkit.Difficult.HARD
* org.bukkit.Difficult.NORMAL
* org.bukkit.Difficult.PEACEFUL

#### Exceptions
Exceptions are error types in Java. They work much like errors in JavaScript. In both Java and JavaScript, you can *throw* an exception when some unexpected condition occurs in your code.

#### Annotations
You don't need to worry about Annotation types when calling Java code from JavaScript.

## The Code
That's just enough Java for now. Before we explore the Bukkit API further let's fire up the programming editor and write some code. Create a new folder in the *plugins/scriptcraft/plugins* folder and call the new folder *enderbow*. Then inside the *enderbow* folder create a new file called *recipe.js* and add the following code:

<caption>Listing 16.1: The Ender Bow Recipe</caption>

    var items = require('items');
    var bkEnchantment = org.bukkit.enchantments.Enchantment;
    var bkShapedRecipe = org.bukkit.inventory.ShapedRecipe;
    
    var enderBow = items.bow(1);
    enderBow.addUnsafeEnchantment( bkEnchantment.LUCK, 3); 
    
    var enderBowRecipe = new bkShapedRecipe( enderBow );
    
    // E = ender pearl
    // S = stick
    // W = thread (string)
    
    enderBowRecipe.shape([
      "ESW", 
      "SEW", 
      "ESW"
    ]);
    
    enderBowRecipe.setIngredient('E', items.enderPearl());
    enderBowRecipe.setIngredient('S', items.stick());
    enderBowRecipe.setIngredient('W', items.string());
    
    server.addRecipe(enderBowRecipe);

Save the file, reload using the `/reload` command and then bring up the crafting grid by right-clicking on a crafting table. When you place Ender Pearls, String and Sticks in the Grid you should see an shimmering bow appear in the right hand side. See Figure 16.5:

[AUTHOR NOTE: images/chapter-16/ender-bow-recipe.png]

![](images/chapter-16/ender-bow-recipe.png)

<caption>Figure 16.5: Crafting Recipe for a Bow</caption>


Put the crafted Ender Bow in your inventory but don't try using it just yet. It will still behave just like a regular bow. We'll add the teleportation magic in the next chapter.
## Using Bukkit Classes and Enums in JavaScript
On lines 2 and 3 of listing 16.1 we declare 2 variables:

    var bkEnchantment = org.bukkit.enchantments.Enchantment;
    var bkShapedRecipe = org.bukkit.inventory.ShapedRecipe;

The names of classes in Java can be quite long-winded because you have to include the package name and the class name. Java programmers call this the *fully qualified name*. Java programmers will often save themselves the need to use fully qualified names by *importing* packages. The JavaScript engine which runs inside Java has an *importPackage()* function but this function is not supported in later versions of JavaScript for Java. I personally like to avoid using fully qualified names throughout JavaScript code which is why whenever I need to refer to a Bukkit Type, I declare a short-named variable at the top of the module which refers to the longer fully-qualified name of the Bukkit Type. I also put a *bk* at the front of the variable name so I know I'm working with a Bukkit object and not a regular JavaScript object. This is just a personal preference. I've found it helps me when I'm writing plugins in JavaScript. It may be useful to you too.

## Enchantments
One way you can mark an item as having special powers is to add an enchantment to it. Enchanted items shimmer and glow in the game. An Ender Bow should shimmer so that the player knows they're not holding a regular bow. For most of the activities you can do in the game, there are equivalent classes and methods in the Bukkit API. For example: In the game players can *add enchantments* to *items*. If we browse the Bukkit API reference we see there's an *inventory* package which has a couple of classes one of which is called *ItemStack*. An *ItemStack* is a collection of one or more *Items* which can be placed in one of the player's inventory slots or held in the player's hand. This *ItemStack* class has *addEnchantment()* and *addUnsafeEnchantment()* methods which we can use to add special powers to items in the game. I'll get into why I chose *addUnsafeEnchantment()* over *addEnchantment()* in a moment but first let's figure out what we want to do:

1. We want to *enchant* the item created from the recipe so that it shimmers and is visually distinct from a regular Bow.
2. We're going to use a ShapedRecipe object. The ShapedRecipe constructor&mdash;the function which will create a new Recipe() object&mdash;takes an *Item* as a parameter&mdash;this item will in turn be created each time a player uses the recipe in the in-game crafting table.
3. We know (from browsing the API reference) that we can add a new recipe to the game using Bukkit.addRecipe() or Server.addRecipe()

The first thing we do is load ScriptCraft's *items* module. This module simplifies the creation of Java *ItemStack* objects. If you want to create an *ItemStack* of 1 Bow. You call *items.bow(1)* and it will return a Java *ItemStack* object to which enchantments can be added. The *items* module has roughly 350 different functions&mdash;1 for each of the materials in Minecraft. You can call each of these functions in 3 different ways. Let's take the *items.bow()* function as an example:

* items.bow() when called without parameters will return the value *org.bukkit.Material.BOW*. This is a *Material* object which is used throughout the Bukkit API.
* items.bow() when called with a number as a parameter e.g. *items.bow(2)* will return an *org.bukkit.inventory.ItemStack* object of 2 Bows. The *ItemStack* type is also used throughout the Bukkit API.
* items.bow() when called with a *Material* as a parameter e.g. *items.bow(material)* will compare the material to the material for this function (each function has its own material) and return true if it's the same or false if it isn't. We saw an example of this in listing 9.6 when we wanted to check if a broken block was of type SAND.

There are many different *Enchantments* in Minecraft some of which are designed for use with Bows. We want to use an enchantment which is not already designed for a Bow because we don't want to interfere with existing enchantment rules. The problem is, if we add an enchantment which was not designed for the item, the enchantment might not stick. For this reason, we use the *addUnsafeEnchantment()* method because we want to add an enchantment which was not designed for the Bow item. If we look at the list of possible *Enchantments* in the Bukkit API docs, there are no obvious teleportation-related enchantments so I chose the *LUCK* enchantment as it's normally for use with Fishing Rods. 

Adding a Level 3 LUCK enchantment to a Bow minimizes the risk that this particular configuration of Item, Enchantment and Level will conflict with existing Item/Enchantment game rules.

## The Recipe
Having created and enchanted the item which will be cooked every time the player uses the recipe, the next step is to setup the ingredients for the recipe.

### A *new* way to create objects
In JavaScript we can create objects using *Object Literals* like this:

    var myNewObject = { name: 'Ender Bow' }

... but there's another way to create objects we haven't mentioned yet. The *new* keyword in JavaScript can be used to create a new JavaScript Object. For example JavaScript has a Date function which when called like this returns the current date and time as a String (In Java 7 for Linux the following code throws an exception but the official JavaScript Specification says you should be able to call Date() as follows) :

    var today = Date();

... However, when you add the *new* keyword in front of the call to Date() it behaves differently. When called like this, the *Date()* function returns a new Object of type Date:

    var today = new Date();

The *new* keyword in JavaScript means the Date() function becomes a *constructor*. A constructor is any function which returns a new object. In *Java* there are only limited ways to create objects using Object Literals so the most common way to construct a new object in *Java* is using the *new* keyword. The statement below:

    var enderBowRecipe = new bkShapedRecipe( enderBow );

... creates a new Java object of type *org.bukkit.inventory.ShapedRecipe* (remember: we declared the bkShapedRecipe variable as short-hand for *org.bukkit.inventory.ShapedRecipe*), passing the *enderBow* object as a parameter.

### The crafting Grid
The Crafting Grid in Minecraft is what appears on screen when you right-click on a crafting table. It's essential for creating tools and weapons in the game. The Grid consists of 3 rows each of which have 3 slots. We need to be able to define&mdash;in code&mdash;what combination of ingredients will result in a new Ender Bow. Fortunately this is relatively easy. The in-game grid can be mapped to an Array of JavaScript strings which substitute each letter for a material. The following diagram shows the crafting grid with letters superimposed on each cell. 

[AUTHOR NOTE: images/chapter-16/gridwithletters.png]

![](images/chapter-16/gridwithletters.png)

<caption>Figure 16.6: Crafting Grid with material codes</caption>


Each letter corresponds to a material: E is for Ender Pearl, S is for Stick and W is for String (Web). If we were to imagine the recipe using just the letters E, S and W as shorthand for each material, the recipe might look like this:

    E S W
    S E W
    E S W

This is how we define the layout of a new shaped recipe in code too. The ShapedRecipe class has a *shape()* method which which takes an array of 3 strings:

    enderBowRecipe.shape([
      "ESW", 
      "SEW", 
      "ESW"
    ]);

### Calling Variable Argument Java Methods from JavaScript
In the *org.bukkit.inventory.ShapedRecipe* details page at http://jd.bukkit.org/rb/apidocs, the information about the *.shape()* method is presented as follows:

     ShapedRecipe   shape(String... shape) 
         Set the shape of this recipe to the specified rows.    

The `String... shape` within the parameters section means that the *.shape()* method takes 1 *or more* Strings as parameters. In Java, this style of parameter passing is called *varargs* which is short for *a variable number of arguments*. When you see a Java method which uses this style of argument passing&mdash;the `...` tells us there can be one or more parameters of that type. When calling such methods from JavaScript we need to pass the parameters as an Array instead. That's why we call the *.shape()* method like this:

    enderBowRecipe.shape([
      "ESW", 
      "SEW", 
      "ESW"
    ]);

Notice the opening `[` and closing `]` array brackets. If we try to call the *.shape()* method as follows, it will fail:

    enderBowRecipe.shape(
      "ESW", 
      "SEW", 
      "ESW"
    );

Whenever you see a method which uses the `...` notation for a parameter, pass an Array in its place.

### Setting ingredients
Now we've defined the shape of the recipe we need to say what each of the letters E, S and W mean. We do this using the *ShapedRecipe.setIngredient()* method which takes 2 parameters, a character and the material it which should be placed wherever that character appears in the shape.

    enderBowRecipe.setIngredient('E', items.enderPearl());
    enderBowRecipe.setIngredient('S', items.stick());
    enderBowRecipe.setIngredient('W', items.string());

## Inheritance
Finally, having set up the rules for the new Recipe we add it to the game using the *server.addRecipe()* method. Let's look at this method again in the online documentation:

1. Go to http://jd.bukkit.org/rb/apidocs
2. Click the *org.bukkit* link in the top left pane.
3. Click the *Server* link in the bottom left pane.
4. Click the *addRecipe* link in the right (main) pane.

The details in the right pane will look something like this:

    boolean addRecipe(Recipe recipe)
      Adds a recipe to the crafting manager.
      Parameters:
        recipe - the recipe to add
      Returns:
        true if the recipe was added, false if it wasn't for some reason

If the *server.addRecipe()* function expects a *Recipe* but we give it a *ShapedRecipe* (that's what enderBow is), why does no error occur? No error occurs because a *ShapedRecipe* is a sub-type of *Recipe*. In Java programming we say that *ShapedRecipe* **inherits** from *Recipe* or is a *Subclass* of it.

Inheritance is an important principle in programming and it's useful to understand what it is to better understand and navigate the Bukkit API Reference document. If we click on the *Recipe* link (the link inside the round brackets above) we're taken to the *Recipe* details page where you'll find the following information in the heading:

    org.bukkit.inventory 
      Interface Recipe
    
        All Known Implementing Classes:
          FurnaceRecipe, ShapedRecipe, ShapelessRecipe
        public interface Recipe
        Represents some type of crafting recipe.

Under *All Known Implementing Classes:* are a list of *Subclasses* or specialized types of *Recipe*. You can think of these classes as *children* of *Recipe*. Each of the classes *FurnaceRecipe*, *ShapedRecipe* and *ShapelessRecipe* are also *Recipe* objects and they *inherit* all of the parent Class's methods and properties, much like people inherit some of the characteristics of their parents: Eye color, Hair color and so on. Since the parent class *Recipe* only has one single method *.getResult()*, you can infer that there's a *FurnaceRecipe.getResult()* method and a *ShapedRecipe.getResult()* method and so on. You can click on the *ShapedRecipe* link to verify this. *ShapedRecipe* does indeed have a *.getResult()* method along with many other of its own methods. 

In programming, Inheritance diagrams like the one shown in Figure 16.7 are useful for understanding inheritance:

[AUTHOR NOTE: images/chapter-16/recipe-inheritance.png]

![](images/chapter-16/recipe-inheritance.png)

<caption>Figure 16.7: Recipe Inheritance Diagram</caption>


From this diagram we can see that *FurnaceRecipe*, *ShapedRecipe* and *ShapelessRecipe* share a common ancestor.

Ultimately the *server.addRecipe()* method *doesn't care* what type of *Recipe* is added, *FurnaceRecipe*, *ShapedRecipe* or *ShapelessRecipe*, it doesn't matter, all the *server* object cares is that it *is* a *Recipe* object so it can call the *Recipe.getResult()* method (which is common to all 3 subclasses) when someone uses the recipe in a crafting grid. We'll revisit this topic in the following Chapter.

## Summary
In this chapter we covered a lot of ground. We learned how to explore the Bukkit API Reference documentation, how to use the *new* keyword and learned about *inheritance* and how to use it when calling Java code. In the next chapter, we'll build upon what we've done here to add Teleporting behavior to the Ender Bow.

</body></html>
