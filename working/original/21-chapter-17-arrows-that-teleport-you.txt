<html><body>
# Chapter 17: Arrows that Teleport you.
## Introduction
In the previous chapter we learned how to add a new Crafting Recipe to the game. In this chapter we'll expand upon the work done previously by adding event-handling code which will listen for *Projectile Hit* events and teleport the player who shot the arrow, if it was fired from an Ender Bow. We'll also learn more about Inheritance and how to use the Bukkit API reference documentation.

## Making the Ender Bow work
The Ender Bow crafted from our new *Crafting Recipe* doesn't do much right now. If you fire an arrow using the Ender Bow, it behaves just like an arrow fired from a regular bow. We're going to change that. 

What we'd like is for players to be able to use the Ender Bow to shoot arrows which teleport them to where ever the arrow lands. To do this we'll need to:

1. Listen for the *Projectile Hit* events and when we receive such an event..
2. Get the player who shot the arrow
3. Get the item the player is currently holding
4. If it's an Ender Bow...
5. Remove the arrow and...
6. Teleport the player to the arrow's location

## Exploring Events
There are over 150 possible events which we can listen for in Minecraft. Event-driven programming means we can write functions which will automatically be called by the game when an event occurs. Such functions are called *callback* functions because the programmer does not call them directly, the program does. It's a case of "Don't call me. I'll call you!". In order to have your callback function be executed when an event occurs, you must *register* the function. ScriptCraft makes registering your callback function easy by providing a registration function for each of the 150+ types of events. You can register your own callback function to listen for *ProjectileHit* events by issuing the following commands at the in-game prompt:

    /js function ouch( event ) { event.entity.shooter.sendMessage('ouch!') }
    /js events.projectileHit( ouch );

Now every time you throw any projectile: a snowball, an egg or fire an arrow, you'll see 'Ouch!' appear on your screen. We'll dig deeper into how the above code works later.

You can see a list of all *events* functions in the Appendices at the back of the book. Each function of the *events* module corresponds to a type of Event in the game. There are so many types of events in Minecraft that they need to be grouped into Java packages:

* org.bukkit.event.block
* org.bukkit.event.enchantment
* org.bukkit.event.entity
* org.bukkit.event.hanging
* org.bukkit.event.inventory
* org.bukkit.event.painting
* org.bukkit.event.player
* org.bukkit.event.server
* org.bukkit.event.vehicle
* org.bukkit.event.weather
* org.bukkit.event.world

In each of these packages you'll find dozens of event types and each event type is different. So when we register for an event using one of the *events* module's functions we can be guaranteed that when that type of event occurs in the game, our callback will invoked with the event as a parameter.

## The events module and event packages
The *events* module has hundreds of functions&mdash;one for each event type&mdash;and was designed to make event registration discoverable at the server or in-game prompt. If you type `events.` then press TAB at the server prompt you will see all 150 plus event registration functions. Each function lets you register for one type of event.

The *events.projectileHit()* function lets you register for events of type *org.bukkit.event.entity.ProjectileHitEvent*; the *events.playerJoin()* function lets you register for events of type *org.bukkit.event.player.PlayerJoinEvent* and so on. The *events.projectileHit()*, *events.playerJoin()* and most other *events* functions are short-hand functions. The function names are *deliberately* short to save typing and to make playing with events at the command prompt easier. There's another function you should know about if you ever need to register for events which are not part of the standard Bukkit API&mdash;for example: events provided by other plugins.

## The events.on() function
The *events.on()* function lets you register for an event of *any* type. It takes 2 parameters:

1. eventType : This must be either a fully qualified Event Type name or a string with a value equal to a bukkit event class without the 'org.bukkit.event.' package prefix. This is better explained by the examples below.
2. callback : A function which will be invoked when the event occurs. This callback behaves exactly as it would when using one of the *events* module's short-hand functions.

So there are 3 possible ways in which a *Projectile Hit* event can be listened for. Imagine we have a listening function called *onProjectileHit* which looks something like this:

    function onProjectileHit( event ) { console.log('projectile hit') }

The first way to register is using the short-hand *events.projectileHit()* function:

    events.projectileHit( onProjectileHit );

The second way is to use the *events.on()* function passing a fully qualified Event Type name:

    events.on( org.bukkit.event.entity.ProjectileHitEvent, onProjectileHit );

The third way is to use the *events.on()* function passing part of the Event Type name as a String:

    events.on( 'entity.ProjectileHitEvent', onProjectileHit );

It doesn't really matter which of the 3 approaches you use but in the rare case you find you need to listen for non-standard events, you should choose the second way and pass the event type's fully qualified name to *events.on()*. 

Of the 3 ways to register for events, using one of the *events* module's short-hand functions is probably the easiest.

## Types of Events and Event properties
Once we register for an event the callback we provide will be executed whenever that event type occurs in the game. The callback is passed a parameter&mdash;the event which was fired. Typically, in your callback function you'll want to do something with the event. The event your callback receives as a parameter will usually have information you'll want to look at and use in your callback. How do we know what information is inside a given event? It's time to revisit a topic we touched on in the previous chapter&mdash;*Inheritance*.

## Digging Deeper into Inheritance
Every event callback function takes a single argument. You can call the parameter anything you like&mdash;*event* or you can shorten it to *evt* or even just *e*. We'll want to do something with the parameter in the function callback. In the case of the Ender Bow, we'll need to get some crucial information from the event so we can teleport the player. This is where&mdash;yet again&mdash;the Bukkit API Reference documentation and the ability to browse it, is essential. 

In this particular instance we're interested in exploring the properties and methods of the *org.bukkit.event.entity.ProjectileHitEvent* type in the online Bukkit Reference at http://jd.bukkit.org/rb/apidocs. Visit the link just mentioned in a web browser, click on the *org.bukkit.event.entity* link in the top left pane, then click on the *ProjectileHitEvent* link in the bottom pane and information about this type of event will appear in the right hand pane. The information we're interested in is the *Method Summary*:

    Projectile getEntity() 
      Returns the Entity involved in this event
    static HandlerList getHandlerList()
    HandlerList getHandlers()

The *getEntity()* method returns an object of type *Projectile*. If we click on the *Projectile* link we're taken to the information page for this type where we find the following:

[AUTHOR NOTE: images/chapter-17/projectile-api.png]

![](images/chapter-17/projectile-api.png)

<caption>Figure 17.1: Projectile API Hierarchy</caption>


    package: org.bukkit.entity 
    Interface Projectile

    All Superinterfaces:
      Entity, Metadatable
    All Known Subinterfaces:
      Arrow, Egg, EnderPearl, Fireball, Fish, LargeFireball, SmallFireball, Snowball, ThrownExpBottle, ThrownPotion, WitherSkull

The pieces of information which are useful here are the *Superinterfaces*&mdash;that is, the parents of this type, and the *Subinterfaces* or children of this type. The following inheritance diagram shows us the relationship better. In this diagram only some of the *Projectile* sub-types are shown for sake of clarity:

[AUTHOR NOTE: images/chapter-17/projectile-inheritance.png]

![](images/chapter-17/projectile-inheritance.png)

<caption>Figure 17.2: Projectile Inheritance Diagram</caption>


The *Superinterfaces* and *Subinterfaces* are important when browsing the Bukkit API types because they tell us about the type's *Ancestry*. The *ancestry* of a type is important because anything a Type's parent can do, the Type can do too. The same goes for the Type's children , they *inherit* the properties and methods of the type. From this you can infer that because the *Projectile* type has a method called *getShooter()*, then the *Arrow*, *Egg* and other other sub-types also have this *getShooter()* method. 

If we look at the *Projectile* type's *parent type*&mdash;*Entity*, listed under *All Superinterfaces*&mdash;we'll find a treasure trove of useful properties and methods. For example, we can find out where the projectile  is by calling the parent type's *.getLocation()* method. We can also *remove* the projectile by calling the parent type's *.remove()* method. Note that neither the *.getLocation()* method nor the *.remove()* method appear on the information page for the *Projectile* type. You need to click on the Projectile Type's parent link *Entity* to see all these super useful methods. Remember, because Projectile is a *child* or sub-type of the *Entity* type, it *inherits* or has all of these properties and methods too! That's the power of Inheritance in Java and it's useful to keep this rule in mind when browsing the Bukkit API Reference. Anything the *Parent Type* can do, the *Type* can do too! So anything an Entity can do, the Projectile can do too! 

If you browse around the Bukkit API and find a type (like *Projectile*) which only appears to have a handful of methods, look at the ancestry&mdash;visit the parent-type links under *extends* or *Superinterface*. If you don't find what you're looking for there, look at the parent's parent and so on. There are lots of useful properties and methods in the Bukkit API but it's often a matter of knowing where and how to look for them. Understanding *Inheritance* helps you dig deeper into the Bukkit API Documentation.

## The Code
We're going to put what we learned about inheritance to use in the following code which will add teleporting behavior to arrows fired by the Ender Bow. Launch your programming editor and create a new file called *arrow.js* in the *enderbow* folder you created in the previous chapter, then enter the following code:

<caption>Listing 17.1: Teleporting Arrows</caption>

    var items = require('items');
    var bkEnchantment = org.bukkit.enchantments.Enchantment;
    var bkArrow = org.bukkit.entity.Arrow;
    var bkPlayer = org.bukkit.entity.Player;
    
    function onArrowHit( event ) {
      var projectile = event.getEntity();
      if (! (projectile instanceof bkArrow) ) {
        return; 
      }
      var shooter = projectile.getShooter();
      if (! (shooter instanceof bkPlayer) ) {
        return;
      }
      var itemInHand = shooter.getItemInHand();
      var arrowLocation = projectile.getLocation();
      if ( isEnderBow( itemInHand ) ) {
        projectile.remove();
        shooter.teleport( arrowLocation );
      }
    }
    events.projectileHit( onArrowHit );
    
    function isEnderBow( item ){
      if (item && 
          (item.getType() == items.bow()) &&
          item.getEnchantmentLevel(bkEnchantment.LUCK) == 3){
        return true;
      }
      return false;
    }
    

Save the above code then reload the plugins using either `/reload' or '/js refresh()` then with Ender Bow in hand, fire an arrow to teleport! 

Now let's look at the above code in more detail. As in the previous chapter we load the *items* module because it has functions for comparing Minecraft items. Next we declare 2 variables which refer to Bukkit Java classes. I use the same naming convention as in the previous chapter, bkEnchantment is short for org.bukkit.enchantments.Enchantment and bkArrow is short for org.bukkit.entity.Arrow. Having the names begin with 'bk' is a reminder to myself that these are Bukkit classes.

The *onArrowHit()* function is a callback which will be executed by the server whenever a Projectile strikes something. In this function we need to: 

1. Get the event's projectile : the thing which was fired.
2. Get the projectile's shooter : the person or thing which fired the arrow.
3. Get the shooter's item held : the thing the shooter is currently holding.
4. Check if the item held is an Ender Bow and if it is teleport the player.

Like all event-handling callback functions, *onArrowHit()* takes a single parameter: *event*. Because we register using the *events.projectileHit()* function, this *event* will be of type *org.bukkit.event.entity.ProjectileHitEvent* and if we browse the online reference at http://jd.bukkit.org/rb/apidocs/ we'll see there's a *.getEntity()* method which returns the *Projectile* for this event. For the rest of this function every piece of information we need can be obtained via the *Projectile* object.

We test to see if the *projectile* variable is of type bkArrow and if it is we return&mdash;this function is only concerned with Arrows, not Eggs or Snowballs. 

Next we need to get the shooter&mdash;the person (or thing) which fired the arrow. The *.getShooter()* method returns an object of type *ProjectileSource* which is another abstract type&mdash;that is&mdash;there can be many possible sub-types. If we browse the online reference and look at *org.bukkit.projectiles.ProjectileSource* we see it has many *SubInterfaces* or Sub-types: Player, Animal, BlockProjectileSource etc. We test to see if the *shooter* is a *Player* which is a specific type of *ProjectileSource*. Again, we're only interested in teleporting players. 

Then we get the item currently held by the player by calling the *.getItemInHand()* method. This is yet another example where we need to use Inheritance rules to find out what methods a Player object has. If you look at the online reference for the *org.bukkit.entity.Player* object you will see that the *Player* object itself does not have *.getItemInHand()* method **but** one of its ancestry types does. A *Player* is a sub-type of *HumanEntity* which has a *.getItemInHand()* method. Because there's a *HumanEntity.getItemInHand()* method and *Player* is a sub-type of *HumanEntity*, we can call the *.getItemInHand()* method on Player too! The Inheritance Diagram for the *Player* type show in Figure 17.3 shows just *some* of the player's ancestry:

[AUTHOR NOTE: images/chapter-17/player-inheritance.png]

![](images/chapter-17/player-inheritance.png)

<caption>Figure 17.3: Player Ancestry</caption>


As you can see in Figure 17.3, each type in Java can have more than one direct ancestor. Every type inherits all of the properties and methods of its ancestry. So a *Player* object can for example use any of the *InventoryHolder* or *Entity* methods. The *Player* type in Minecraft is one of the most versatile object types because of its rich ancestry. 

Once we have the item the player is currently holding we pass it to a function we define called *isEnderBow()* . This function checks to see if the item is of type Bow and if it has a level 3 LUCK enchantment.

Finally, if the item held *is* an Ender Bow, we remove the projectile because we don't want the arrow left behind&mdash;it makes sense that an arrow which teleports you should disappear&mdash;then we teleport the shooter to the arrow's location.

## More on Types
The *instanceof* operator is an operator common to both Java and JavaScript. It's used to test the *Type* of an object. It can be useful when calling the Bukkit API from JavaScript when we want to identify the exact type of an object. In listing 17.1 we use the operator to check if the projectile fired was an Arrow. It could be any type of projectile&mdash;an Egg, Fireball, Snowball etc&mdash;but we're only interested in handling the event if it was an Arrow. The *instanceof* operator will compare the expression on the left to the expression on the right and if they are of the same type will return true. You can test this at the command line:

    /js self instanceof org.bukkit.entity.Horse
    > "false"
    /js self instanceof org.bukkit.entity.Player
    > "true"

The *instanceof* operator lets us test a generic type against a specific type. Note that because of the way Java inheritance works, it's possible for an object to be an instance of more than one type. For example, both of these JavaScript expressions will return true:

    /js self instanceof org.bukkit.entity.AnimalTamer
    > "true"
    /js self instanceof org.bukkit.entity.LivingEntity
    > "true"

... because a player is an instance of both types, AnimalTamer and LivingEntity. The *instanceof* operator is most commonly used to narrow down an object to a specific type so we can be confident that we can call methods for that type without exceptions being thrown. For example: if you wanted to be sure that a given object was an actual Player and not just any LivingEntity (all creatures and villagers are also of type LivingEntity) you would do so by testing like so:

    /js self instanceof org.bukkit.entity.Player

The *org.bukkit.entity* package is where you'll find all of the entity types. The *instanceof* operator can be used for testing *any* type of object in Java or JavaScript.

## Java Beans
The type of functions we used to get information about the event, projectile and shooter in listing 17.1 are called *getters*. They're called *getters* because they each *get* some property of the object they're called for; `event.getEntity()` gets the event's entity property, `projectile.getShooter()` gets the projectile's shooter property and so on. As you can probably guess there's also a family of functions called *setters*; functions whose job is to *set* the property for an object. For example you can *get* your current food level using the *.getFoodLevel()* method:

    /js self.getFoodLevel()

... and you can *set* your current food level using the *.setFoodLevel()* method:

    /js self.setFoodLevel(20)

Java classes which use the convention of having *getters* and *setters* methods to get and set properties are known as **Java Beans**. JavaScript enables you to treat getter and setter methods in JavaBeans as equivalent JavaScript properties. The name of the property is the name of the JavaBean method without the get or set suffix, and starts with a lowercase letter. For example you can call the getFoodLevel() and setFoodLevel() methods in an org.bukkit.entity.Player object using the foodLevel property as follows:

    /js self.foodLevel
    > "17"

To set the foodLevel property just assign a value to it.

    /js self.foodLevel = 20

This is a nice convenience when writing JavaScript code which uses Java Types. Let's revisit the code from earlier, this time using just property names instead of *get()* methods:

<caption>Listing 17.2: Accessing JavaBean properties directly</caption>

    var items = require('items');
    var bkEnchantment = org.bukkit.enchantments.Enchantment;
    var bkArrow = org.bukkit.entity.Arrow;
    
    function onArrowHit( event ) {
      var projectile = event.entity;
      if (! (projectile instanceof bkArrow) ) {
        return; 
      }
      var shooter = projectile.shooter;
      if (! (shooter instanceof bkPlayer) ) {
        return;
      }
      var itemInHand = shooter.itemInHand;
      if ( isEnderBow( itemInHand ) ) {
        projectile.remove();
        shooter.teleport( projectile.location );
      }
    }
    events.projectileHit( onArrowHit );
    
    function isEnderBow( item ){
      if (item && 
          (item.type == items.bow()) &&
          item.getEnchantmentLevel(bkEnchantment.LUCK) == 3){
        return true;
      }
      return false;
    }
    

I personally prefer using just the property names rather than the get and set methods because I think the code is more readable but it's a matter of personal taste. If you feel more comfortable sticking to the Java convention of using the getX() and setX() (where X is some property) when working with Java types from within JavaScript, then by all means use those methods. 

## A Note on Style
At the start of this chapter I suggested running the following code and said I'd explain how it works:

    /js function ouch( event ) { event.entity.shooter.sendMessage('ouch!') }
    /js events.projectileHit( ouch );

The *ouch()* function above uses the Java Bean property shorthand notation described previously to get the *entity* property for the *event*, then the *shooter* property for the *entity* then sends a message using the *sendMessage()* method of the *shooter*. The entire function body is just a single JavaScript statement:

    event.entity.shooter.sendMessage('ouch!')

I wrote it like this so I could create a short callback function at the in-game prompt. Functions at the in-game prompt are limited to just 100 characters on a single line. If I were writing the function in a module I might be more verbose and write it like this instead:

    function ouch( event ) {
      var entity = event.entity;
      var shooter = entity.shooter;
      shooter.sendMessage('ouch!');
    } 

The one-line version of the code avoids the need to create new variables for the entity and the shooter but is probably less readable&mdash;especially for beginning programmers. Once again, whichever style you use is up to you. You should experiment with different styles as you become more adept and comfortable writing JavaScript code.

## Summary
In this chapter we completed all of the code needed to add a Teleporting Ender Bow to the game and learned more about Inheritance and how to use it when browsing the Bukkit API reference.

</body></html>
